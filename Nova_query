### Decidi deixar aqui o código do readquery para facilitar na hora de montar o programa

readquery <- function()
{ 
prompt <- "Digite a consulta: "
  n <- readline(prompt)
  n <- (unlist(strsplit(n, "\\s+")))
  return(n)
}

## O objetivo desta nova consulta é montar um
## data frame com nome do documento | Similaridade
consulta2<- function() {
rq<-tolower(readquery())

#Inicializa o dataframe que vai receber os valores de similaridade por documento
df<- data.frame( Documento=character())
# Loop que trata dos documentos
for (j in 1:iteracoes){
	arquivo <- doclist[j]
	documento <- paste( 'Doc',j, sep="" )
	#Inicializa o valor de similaridade
	sim <- 0

#Calcula a similaridade (da query com documento):
	for (i in 1:length(rq)){
		t1 <-rq[i]
		##############################################
		############## A MELHORAR: ###################
		##############################################
		# Se encontrar um valor NA, essa operação dá erro
		# No data frame item5, foram removidos os valores NA e 
		# substituidos por zero, mas de qq forma, vale a pena.
		tfidfodc <-(as.numeric(as.character(item5[item5$Termos==t1,c(documento)])))
		sim <- sim+tfidfodc
	} 
	tempdf <- data.frame(arquivo,sim,stringsAsFactors=FALSE)
	colnames(tempdf)<-c("Documento","Similaridade")
	df<-merge(df,tempdf, by=intersect(names(df),names(tempdf)), all=T)
}
df<-df[with(df, order(as.numeric(df$Similaridade),decreasing = TRUE)),]
#relevantes<-teste[1:10,]
df<-df[1:10,]
return(df)
}

final<-consulta2()

#Faltava reduzir para 10... não falta mais
#So falta a bobagem do pdf que ja tem o codigo em algum canto
