library(gridExtra)
library(grid)
# 0.1 - Descompacta e acessa pasta do arquivo
wd<- paste((getwd()),"/R",sep="")
setwd(wd)
unzip("curto.zip",exdir = "./curto",junkpaths = FALSE)
wd<- paste((getwd()),"/curto",sep="")
setwd(wd)

# 0.2 - Lista dos arquivos descompactados na pasta
doclist<- list.files(path = ".", pattern = ".txt", all.files = FALSE, full.names = FALSE, recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)

# 0.3 -Função para leitura do arquivo 
# Obs: troca os caracteres maiúsculos por minúsculos, descarta termos com 1 caracter.
obtem_vetor <- function(f,lower=FALSE,min_len=2) {
    vetor <- scan(f, sep=" ", what=character(),quote = if(identical("\'", "")) "" else "\n")
    
    if(lower) {
        vetor <- tolower(vetor)
    }
    return(vetor[nchar(vetor)>=min_len])
    
}




# 0.4 -Loop para Calculo de TF (Sem penalizar) e gera arquivo csv
# Monta a matriz de TF e matriz TF com fórmula do log
x <- data.frame( Termos=character())
item3<- data.frame( Termos=character())
for (i in 1:(length(doclist))){
  arquivo <- doclist[i]
  termos <- obtem_vetor(arquivo)
 xyz<- termos
#  xyz<-unlist(strsplit(termos, "\\W+"))
  palavras <- paste(i,names(table(xyz)), table(xyz), sep=",")
  palavras2 <- as.data.frame((cbind(names(table(xyz)),table(xyz))), row.names = FALSE)
  palavras3 <- as.data.frame((cbind(names(table(xyz)),1+log10(table (xyz)))), row.names = FALSE)
  vetor <- paste(palavras, sep="\n", "\n") 
  write.csv(cat(vetor, file ="curto.csv",append=TRUE))
#parte que monta a tabela documentos x TF
  y<-palavras2
  colnames(y)<-c("Termos",paste("Doc",i,sep=""))
  colnames(palavras3)<-c("Termos",paste("Doc",i,sep=""))
  x<-merge(x,y, by=intersect(names(x),names(y)), all=T)
  item3<-merge(item3,palavras3, by=intersect(names(item3),names(palavras3)), all=T)
}

x<-x[with(x, order(as.character(x$Termos))),]
item3<-item3[with(item3, order(as.character(item3$Termos))),]
# 0.5 - Leitura do arquivo csv com o resultado da matriz Term frequency (TF) (sem penalizar)
termosdocumentos = read.csv("curto.csv", stringsAsFactors = F,header = FALSE)
colnames(termosdocumentos)=c("doc","termo","freq")

#0.6 Teste
paraPdf=function(arquivocsv,saida){
  text=read.csv(arquivocsv, stringsAsFactors=FALSE,header = TRUE)
  maxrow = 30;
  npages = ceiling(nrow(text)/maxrow)
  #  grb=textGrob(apply(text, 2, paste, collapse="\n"))
  pdf(saida, width=8.5,height=11.6)
  for (i in 1:npages) {
    idx = seq(1+((i-1)*maxrow), i*maxrow)
    grid.newpage()
    grid.table(text[idx, ])
  }
  dev.off()
}

# 1.0 - Solicitado "código para produzir a matriz de document frequency (DF) conforme a fórmula com log"
# Obs.: Acho que se deseja, na verdade, iDF x Termo, não?
s<-summary((as.factor(termosdocumentos$termo)),maxsum = 999999)

termo_df_idf<- as.data.frame(cbind(Termos=names(s),df = s, idf = log10((length(doclist))/s)), stringAsFactors=F,row.names=1:length(s))
item1<-termo_df_idf

# 2.0 Gera um arquivo pdf com o resultado da matriz DF x Termo
# Obs.: Acho que se deseja, na verdade, iDF x Termo, não?

write.csv(item1, file ="curto_item2.csv",row.names = FALSE)
paraPdf("curto_item2.csv","item2.pdf")


# 3.0 - Código para produzir a matriz de Term frequency (TF) conforme a fórmula com log
# Obs.: #Calcula o terceiro item solicitado no trabalho -> Matriz de Term Frequency (TF) (penalizando)

#Já está sendo feito em  0.4, ver variável item3




# 5.0 Código para produzir a matriz de TF*IDF
item5 <- termo_df_idf$Termos
item5 <-as.data.frame(item5)
colnames(item5)<-c("Termos")

# WIP
for (i in 1:(length(doclist))){

coluna<-paste("item5.Doc",i,sep="")
valor<-paste( "(as.numeric(as.character(item3$Doc",i,", row.names = NULL)))*(as.numeric(as.character(termo_df_idf$idf,row.names = NULL)))" ,sep="")
assign(coluna,eval(parse(text=valor)))
valor2<-paste("as.data.frame(item5.Doc",i,")",sep="")
assign(coluna,eval(parse(text=valor2)))
t1 <- paste( "colnames(",coluna,")<-c('Doc",i,"')", sep="" )
eval(parse(text=t1))
t2<-paste( "cbind(item5,item5.Doc", i, ", row.names=NULL)", sep="" )
item5<-eval(parse(text=t2))
t3 <- paste( "rm(", coluna,")",sep="" )
eval(parse(text=t3))
}


item5[is.na(item5)] <- 0
# 4.0 insira no arquivo pdf com o resultado da matriz TF x Documento.
# WIP 

write.csv(item3, file ="curto_item4.csv",row.names = FALSE)
paraPdf("curto_item4.csv","item4.pdf")

# 6.0 "insira no arquivo pdf com o resultado da	matriz TF*IDF."
# WIP
write.csv(item5, file ="curto_item6.csv",row.names = FALSE)
paraPdf("curto_item6.csv","item6.pdf")
